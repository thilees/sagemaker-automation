#Creating notebook instances
resource "aws_sagemaker_notebook_instance" "ni" {
  name          = "cmbot-notebook-instance"
  role_arn      = "${aws_iam_role.ni_role.arn}"
  instance_type = "ml.t2.medium"
  lifecycle_config_name = "${aws_sagemaker_notebook_instance_lifecycle_configuration.basic_lifecycle.name}"
  tags = local.common_tags

  depends_on = ["aws_s3_bucket.s3bucket"]
}

#Role for the notbook instance
resource "aws_iam_role" "ni_role" {
  name = "cmbot_ni_role"
  path = "/"
  assume_role_policy = "${data.aws_iam_policy_document.assume_role.json}"
  tags = local.common_tags
   
  depends_on = ["aws_s3_bucket.s3bucket"]
}

##Assume role data
data "aws_iam_policy_document" "assume_role" {
  statement {
    actions = [ "sts:AssumeRole" ]
    principals {
      type = "Service"
      identifiers = [ "sagemaker.amazonaws.com" ]
    }
  }
}

resource "aws_iam_policy" "ni_policy" {
  name = "cmbot_ni_policy"
  description = "Allow Sagemaker to create model"
  policy = "${data.aws_iam_policy_document.ni_model_policy.json}"
}

data "aws_iam_policy_document" "ni_model_policy" {
  statement {
    effect = "Allow"
    actions = [
      "sagemaker:*"
    ]
    resources = [
      "*"
    ]
  }  
  statement {
    effect = "Allow"
    actions = [
      "iam:GetRole",
      "iam:PassRole"
    ]
    resources = [
      "arn:aws:iam::058243774065:role/cmbot_ni_role"
    ]
  }
  statement {
   effect = "Allow"
   actions = [
     "ecr:GetDownloadUrlForLayer",
     "ecr:BatchGetImage",
     "ecr:BatchCheckLayerAvailability"
      ]
      resources = [
        "arn:aws:ecr::058243774065:repository/*"
       ]
  }
  statement {
    effect = "Allow"
    actions = [
      "ec2:CreateVpcEndpoint",
      "ec2:DescribeRouteTables"
    ]
    resources = [ "*"
    ]
  }  
  statement {
   effect = "Allow"
   actions = [
      "cloudwatch:PutMetricData",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics"
    ]
    resources = [
      "arn:aws:cloudwatch::058243774065:*"
    ]
  }  
  statement {
    effect = "Allow"
    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DescribeLogStreams",
      "logs:GetLogEvents",
      "logs:PutLogEvents"
    ]
    resources = [
      "arn:aws:logs::058243774065:log-group:/aws/sagemaker/*"
    ]
  }
  statement {
    effect = "Allow"
    actions = [
      "cloudwatch:PutMetricData",
      "logs:CreateLogStream",
      "logs:PutLogEvents",
      "logs:CreateLogGroup",
      "logs:DescribeLogStreams",
      "ecr:GetAuthorizationToken",
      "ecr:BatchCheckLayerAvailability",
      "ecr:GetDownloadUrlForLayer",
      "ecr:BatchGetImage"
    ]
    resources = [
      "*"]
  }
  statement {
    effect = "Allow"
    actions = [
      "s3:GetBucketLocation",
      "s3:ListBucket",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ]
    resources = [
      "arn:aws:s3:::${aws_s3_bucket.s3bucket.bucket}",
      "arn:aws:s3:::${aws_s3_bucket.s3bucket.bucket}/*"
    ]
  }
}

resource "aws_iam_role_policy_attachment" "cmbot_ni_policy_attachment" {
  role = "${aws_iam_role.ni_role.name}"
  policy_arn = "${aws_iam_policy.ni_policy.arn}"
}


data "template_file" "instance_init" {
  template = "${file("${path.module}/template/sagemaker_instance_init.sh")}"

  vars = {
  }
}

resource "aws_sagemaker_notebook_instance_lifecycle_configuration" "basic_lifecycle" {
  name     = "BasicNotebookInstanceLifecycleConfig"
  on_start = "${base64encode(data.template_file.instance_init.rendered)}"

  depends_on = ["aws_s3_bucket_object.nodebook_script"]
}


